#!/usr/bin/python3

import argparse
import getpass
import os
import glob
import tempfile
import sh
import sys
import logging
from jinja2 import Template
from ruamel.yaml import YAML
import requests
import re
import html
import textwrap
from io import StringIO
import frontmatter
from tidylib import tidy_fragment
from theblues.charmstore import CharmStore
from k8sDocTools.templates import charm_actions_tpl1
from k8sDocTools.templates import charm_config_tpl_2
from k8sDocTools.utils import *

cs = CharmStore('https://api.jujucharms.com/v5')

store_url = (
    "https://api.jujucharms.com/charmstore/v5/~containers/*charm*/archive/config.yaml"
)

charm_actions_tpl1 = """
{% for c in obj.keys()|sort %}
<div class="row">
  <div class="col-2">
     <h5> {{c}}</h5>
  </div>
  <div class="col-7">
    <p>{{obj[c]['Description']}}</p>
  </div>
</div>
{% if not obj[c]['Params']['properties'] == {} %}
<div class="row">
  <div class="col-2">
  </div>
  <div class="col-7">
    <p>This action has the following parameters:</p>
    <table class ="u-table-layout--auto">
      <thead>
        <tr>
          <th>parameter</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
{% for p in obj[c]['Params']['properties'].keys()|sort %}
        <tr>
          <td><pre>{{p}}</pre></td>
          <td>{{obj[c]['Params']['properties'][p]['description']}}
              <p><strong>Default:</strong> {{obj[c]['Params']['properties'][p]['default']}} </p>
        </td>
        </tr>
{% endfor %}
      </tbody>
      </table>
    </div>
  </div>
{% endif %}
<hr>
{% endfor %}
"""

charm_actions_pre="""<!-- ACTIONS STARTS -->
<!-- AUTOGENERATED TEXT - DO NOT EDIT -->

You can run an action with the following

```bash
juju run-action {{name}} ACTION [parameters] [--wait]
```

"""

charm_actions_tpl2 = """
{% for c in obj.keys()|sort %}

<div class="row">
    <div class="col-2">
         <ul class="p-list">
            <li class="p-list__item"><em> {{c}} </em></li>
          </ul>
        </div>
        <div class="col-7">
          <ul class="p-list">
            <li class="p-list__item">{ {obj[c]['Description']}}</a></li>
          </ul>
        </div>
      </div>

{% if not obj[c]['Params']['properties'] == {} %}
<div class="row">
    <div class="col-2">
         <ul class="p-list">
            <li class="p-list__item"> &nbsp; </li>
          </ul>
        </div>
        <div class="col-7">
          <ul class="p-list">
{% for p in obj[c]['Params']['properties'].keys()|sort %}

          </ul>
        </div>
      </div>

{% for p in obj[c]['Params']['properties'].keys()|sort %}
            <tr><td>
             {{p}}
             </td>
             <td> Default: {{obj[c]['Params']['properties'][p]['default']}}</td><tr>
             <tr><td> {{obj[c]['Params']['properties'][p]['description']}}</td><tr>
{% endfor %}
            </tbody>
            </table>
{% endif %}


{% endfor %}
  </tbody>
</table>

"""

charm_actions_post = """

<!-- ACTIONS ENDS -->
"""

if  not '__version__' in globals():
    __version__ = 'test-version'

class CharmPage():
    def __init__(self):

        self.empty = True
        self.revision = 0
        self.data = frontmatter.loads('')

    def __init__(self, filename):
        self.loadfromfile(filename)
        self.name = self.data['charm_name']
        self.revision = self.data['charm_revision']
        self.store_name = 'cs:~containers/'+self.name
        if self.revision == '0':
            # get latest version from the store and update revision
            self.obj =  CharmStore('https://api.jujucharms.com/v5').entity(self.store_name)
            # self.revision = self.obj['Id'].split('-')[-1:][0]
        else:
            self.obj =  CharmStore('https://api.jujucharms.com/v5').entity(self.store_name+'-'+self.revision)
        if 'ActionSpecs' in self.obj['Meta']['charm-actions']:
            if not self.obj['Meta']['charm-actions']['ActionSpecs'] == None:
                for k, v in self.obj['Meta']['charm-actions']['ActionSpecs'].items():
                    v['Params']['description'] = self.sanitize(v['Params']['description'])
                    for kk, vv in v['Params']['properties'].items():
                         vv['description'] = self.sanitize(vv['description'])
                         if 'default' in vv:
                             vv['default'] = '\n'.join(textwrap.wrap(str(vv['default']), 50))

    def sanitize(self,txt):
        txt = html.escape(txt)
        txt = '\n'.join(textwrap.wrap(txt, 50))
        txt = '<p>'+txt.replace('\n\n', ' </p> <p>').replace('\n', ' ').strip()+'</p>'
        return(txt)

    def loadfromfile(self, filename):
        """
        Constructs the CharmPage object by reading in a previously generated
        markdown docs file
        """
        with open(filename) as f:
            self.data = frontmatter.load(f)

    def loadfromurl(self,url):
        pass

    def generate(self, revision):
        """
        Generate a new page for the specific version by fetching the current
        master page from the docs repo and updating it based on the store
        data for the specified revision
        """
        self.page = requests.get(docs_url+'charm-'+self.name+'.md').content.decode("utf-8")
        pass

    def updatecurrent(self):
        """
        Update the current object data (actions, config etc) based on the store
        content of the given version. If the charm_version is 0 or missing,
        the version should be set from the latest stable version of the charm
        """
        pass

    def dump(self):
        print(self.data.keys())
        print("Charm - "+ self.data['context']['title'])
        if 'charm_revision' in self.data:
            print("Revision "+self.data['charm_revision'])
            self.revision = self.data['charm_revision']
        else:
            print("No revision recorded")
            self.revision = 0

    def generateactions(self):
        template_pre = Template(charm_actions_pre)
        template = Template(charm_actions_tpl1)
        template_post= Template(charm_actions_post)
        if 'ActionSpecs' in self.obj['Meta']['charm-actions']:
            if not self.obj['Meta']['charm-actions']['ActionSpecs'] == None:
                obj= self.actionsobj(self.obj['Meta']['charm-actions']['ActionSpecs'])
                self.actionstxt = template.render({'obj': obj, 'name': self.name})
                self.actionstxt, errors = tidy_fragment(self.actionstxt, options={'indent-attributes':1})
                print(errors)
                self.actionstxt = template_pre.render({'obj': obj, 'name': self.name})+self.actionstxt
                self.actionstxt += template_post.render({'obj': obj, 'name': self.name})
            else:
                self.actionstxt = "<!-- ACTIONS STARTS -->\n\n<!-- ACTIONS ENDS -->"
        else:
            self.actionstxt = "<!-- ACTIONS STARTS -->\n\n<!-- ACTIONS ENDS -->"
        regex = "<!-- ACTIONS STARTS -->\n(.*)\n<!-- ACTIONS ENDS -->"
        # self.actionstxt = HTMLBeautifier.beautify(self.actionstxt, 4)
        self.data.content = re.sub(regex, self.actionstxt, self.data.content, 1, re.DOTALL)

        pass
    def output(self, filename):
        with open(filename,'w') as f:
           f.write(frontmatter.dumps(self.data))
        pass
    def actionsobj(self,obj):
        print(obj)
        return(obj)

    def actions2obj(self):
        obj = self.obj['Meta']['charm-actions']['ActionSpecs']
        return(obj)

    def insertconfig(self):
        pass


def main():
    parser = argparse.ArgumentParser(
        description="Charm Page generator" + __version__
    )

    parser.add_argument("--charm", help="A specific charm")
    parser.add_argument("-f","--filename", help="A specific charm markdown page")
    parser.add_argument("--replace", help="if filename spcified, output overwrites original file", default=False)
    args = parser.parse_args()
    if args.filename :
        cp = CharmPage(args.filename)
        cp.generateactions()
        if args.replace :
            cp.output(args.filename)
        else:
            cp.output('out.md')
        print('done')
if __name__ == "__main__":
    main()
